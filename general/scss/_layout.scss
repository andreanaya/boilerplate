html, body {
	font-size: $base-font-size + px;
	line-height: $base-line-height + rem;
}

* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

h1, h2, h3, h4, h5, h6 {
	@include mg-top(md);
	@include mg-bottom(sm);
}

p {
	@include mg(sm);
}

img, figure, pre, blockquote, hr {
	@include mg(md);
}

.icon {
	width: 1em;
	height: 1em;
	fill: currentColor;
}

.grid {
	@include grid();

	& > .cell {
		@include grid-cell();
	}
}

.mansory {
	column-width: $column-width;
	column-gap: 0;
	line-height: 0;
	margin: -0.5em;

	& > .cell {
		display: inline-block;
		position: relative;
		width: 100%;
		padding: 0.5em;

		.ie9 & {
			@include tablet() {
				width: 32%;
			}

			@include desktop() {
				width: 24%;
			}

			@include wide() {
				width: 16%;
			}
		}
	}
}

@mixin make-layout($breakpoint: '') {
	$target: '';
	$key: default;

	@if($breakpoint != '') {
		$target: --#{$breakpoint};
		$key: $breakpoint;
	}


	@each $size, $value in $sizes {
		.margin-#{$size}#{$target} {
			@include margin($size);
		}

		.padding-#{$size}#{$target} {
			@include padding($size);
		}
		
		.pd-#{$size}#{$target} {
			@include pd($size);
		}

		.pd-top-#{$size}#{$target} {
			@include pd-top($size);
		}
		.pd-bottom-#{$size}#{$target} {
			@include pd-bottom($size);
		}
		.pd-left-#{$size}#{$target} {
			@include pd-left($size);
		}
		.pd-right-#{$size}#{$target} {
			@include pd-right($size);
		}
		
		.mg-#{$size}#{$target} {
			@include mg($size);
		}
		.mg-h#{$size}#{$target} {
			@include mg-h(-$size);
		}
		.mg-top-#{$size}#{$target} {
			@include mg-top($size);
		}
		.mg-bottom-#{$size}#{$target} {
			@include mg-bottom($size);
		}
		.mg-left-#{$size}#{$target} {
			@include mg-left($size);
		}
		.mg-right-#{$size}#{$target} {
			@include mg-right($size);
		}
	}

	.mg-auto#{$target} {
		margin-top: auto;
		margin-bottom: auto;
	}
	.mg-h-auto#{$target} {
		margin-left: auto;
		margin-right: auto;
	}
	.mg-top-auto#{$target} {
		margin-top: auto;
	}
	.mg-bottom-auto#{$target} {
		margin-bottom: auto;
	}
	.mg-left-auto#{$target} {
		margin-left: auto;
	}
	.mg-right-auto#{$target} {
		margin-right: auto;
	}

	@for $i from 1 through $grid-columns {
		.col-#{$i}#{$target} {
			@include grid-col($i);
		}
		.span-#{$i}#{$target} {
			@include grid-span($i, $grid-columns);
		}
		.offset-#{$i}#{$target} {
			@include grid-offset($i, $grid-columns);
		}
		.push-#{$i}#{$target} {
			@include grid-push($i, $grid-columns);
		}
		.pull-#{$i}#{$target} {
			@include grid-pull($i, $grid-columns);
		}
		.overlay-#{$i}#{$target} {
			@include grid-overlay($i, $grid-columns);
		}

		@if($breakpoint == '') {
			.constrain-#{$i} {
				@include grid-constrain($i, $grid-columns);
			}
		}
	}

	@each $value in $custom-grid {
		.columns-#{$value} > {
			@for $i from 1 through $value {
				.span-#{$i}#{$target} {
					@include grid-span($i, $value);
				}
				.offset-#{$i}#{$target} {
					@include grid-offset($i, $value);
				}
				.push-#{$i}#{$target} {
					@include grid-push($i, $value);
				}
				.pull-#{$i}#{$target} {
					@include grid-pull($i, $value);
				}
				.overlay-#{$i}#{$target} {
					@include grid-overlay($i, $value);
				}

				@if($breakpoint == '') {
					.constrain-#{$i} {
						@include grid-constrain($i, $value);
					}
				}
			}
		}
	}

	.offset-none#{$target} {
		margin-left: 0;
	}
	.push-none#{$target} {
		left: 0;
	}
	.pull-none#{$target} {
		right: 0;
	}
	.overlay-none#{$target} {
		margin-left: 0;
	}

	@each $size, $value in $sizes {
		.gutter-#{$size}#{$target} {
			@include grid-gutter($size);
		}
	}

	.clear#{$target} {
		clear: right;
	}
	.clear-left#{$target} {
		clear: left;
	}
	.clear-both#{$target} {
		clear: both;
	}
	.clear-none#{$target} {
		clear: none;
	}

	.flex#{$target}.grid {
		align-items: stretch;
		flex-wrap: wrap;
	}
	.flex#{$target}.grid:after {
		content: normal;
	}
	.flex#{$target}.grid > cell {
		float: none;
		flex-grow: 0;
		flex-shrink: 0;
	}
	
	@each $value in (none, inline, block, inline-block, static, flex, inline-flex) {
		.#{$value}#{$target} {
			display: $value;
		}
	}

	@each $value in (static, relative, absolute, fixed) {
		.#{$value}#{$target} {
			position: $value;
		}
	}

	.full-width#{$target} {
		width: 100%;
	}

	.full-screen#{$target} {
		width: 100vw;
		height: 100vh;
	}

	.cover#{$target} {
		width: 100%;
		height: 100%;
	}

	@each $value in (top, bottom, left, right) {
		.#{$value}#{$target} {
			#{$value}: 0;
		}
	}

	@if($breakpoint != '') {
		.constrain#{$target} {
			max-width: 1440px;
			margin-left: auto;
			margin-right: auto;
		}
	}


	.image-block#{$target}, .video-block#{$target} {
		display: block;
		position: relative;
		width: 100%;
		height: auto;
	}

	.image-cover#{$target}, .video-cover#{$target} {
		display: block;
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		object-fit: cover;
		margin: 0;
	}

	.flx-fixed#{$target} {
		flex-shrink: 0;
		flex-grow: 0;
	}
	.flx-fluid#{$target} {
		flex-shrink: 1;
		flex-grow: 1;
		max-width: none;
	}

	@each $value in (row, column, reverse, column-reverse) {
		.flx-#{$value}#{$target} {
			flex-direction: $value;
		}
	}

	@each $value in (flex-start, flex-end, center, stretch, baseline) {
		.flx-align-#{$value}#{$target} {
			align-items: $value;
		}
	}

	@each $value in (flex-start, flex-end, center, stretch, baseline) {
		.flx-align-self-#{$value}#{$target} {
			align-self: $value;
		}
	}

	@each $value in (flex-start, flex-end, center, between, around) {
		.flx-justify-#{$value}#{$target} {
			justify-content: $value;
		}
	}

	.layer-bg#{$target} {
		z-index: -1;
	}
	.layer-auto#{$target} {
		z-index: auto;
	}

	@for $i from 0 through 9 {
		.layer-#{$i} {
			z-index: $i;
		}
	}

	@each $value in (hidden, scroll, auto, visible) {
		.overflow-#{$value}#{$target} {
			overflow: $value;
		}
		.overflow-x-#{$value}#{$target} {
			overflow-x: $value;
		}
		.overflow-y-#{$value}#{$target} {
			overflow-y: $value;
		}
	}

	.squared#{$target} {
		position: relative;

		&:before {
			content: '';
			display: block;
			position: relative;
			padding-top: 100%;
		}
	}

	.truncate#{$target} {
		display: block;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}

	.nowrap#{$target} {
		white-space: nowrap;
	}
	
	@each $pattern, $url in $patterns {
		.pattern-#{$pattern}#{$target} {
			background-repeat: repeat;
			background-image: url($url);
		}
	}

	@for $i from 1 through 10 {
		.bd-#{$i}#{$target} {
			border-width: $i + px;
			border-style: solid;
		}
		.bd-top-#{$i}#{$target} {
			border-top-width: $i + px;
			border-top-style: solid;
		}
		.bd-bottom-#{$i}#{$target} {
			border-bottom-width: $i + px;
			border-bottom-style: solid;
		}
		.bd-left-#{$i}#{$target} {
			border-left-width: $i + px;
			border-left-style: solid;
		}
		.bd-right-#{$i}#{$target} {
			border-right-width: $i + px;
			border-right-style: solid;
		}
	}


	@each $color, $hex in $colors {
		@each $value in ('default', 'hover', 'active', 'focus', 'visited') {
			$state: --#{$value}#{unquote(':')}#{$value};
			
			@if($value == 'default') {
				$state: '';
			}

			.cl-#{$color}#{$target}#{$state} {
				color: $hex;
			}
			.bg-#{$color}#{$target}#{$state} {
				background-color: $hex;
			}

			.bd-#{$color}#{$target}#{$state} {
				border-color: $hex;
			}
			.bd-top-#{$color} {
				border-top-color: $hex;
			}
			.bd-bottom-#{$color} {
				border-bottom-color: $hex;
			}
			.bd-left-#{$color} {
				border-left-color: $hex;
			}
			.bd-right-#{$color} {
				border-right-color: $hex;
			}
		}
	}

	@each $color, $hex in $social-colors {
		@each $value in ('default', 'hover', 'active', 'focus', 'visited') {
			$state: --#{$value}#{unquote(':')}#{$value};
			
			@if($value == 'default') {
				$state: '';
			}
			
			@if($color != 'instagram') {
				.cl-#{$color}#{$target}#{$state} {
					color: $hex;
				}
				.bg-#{$color}#{$target}#{$state} {
					background-color: $hex;
				}
				.bd-#{$color}#{$target}#{$state} {
					border-color: $hex;
				}
			} @else {
				.bg-#{$color}#{$target}#{$state} {
					background-image: $hex;
				}
			}
		}
	}

	@each $color, $hex in $default-colors {
		@each $value in ('default', 'hover', 'active', 'focus', 'visited') {
			$state: --#{$value}#{unquote(':')}#{$value};
			
			@if($value == 'default') {
				$state: '';
			}

			.cl-#{$color}#{$target}#{$state} {
				color: $hex;
			}
			.bg-#{$color}#{$target}#{$state} {
				background-color: $hex;
			}
			.bd-#{$color}#{$target}#{$state} {
				border-color: $hex;
			}
		}
	}

	@each $shade, $amount in $shades {
		@each $value in ('default', 'hover', 'active', 'focus', 'visited') {
			$state: --#{$value}#{unquote(':')}#{$value};
			
			@if($value == 'default') {
				$state: '';
			}

			@if($value == 'default') {
				$state: '';
			}

			$grey: get-shade($amount);
			
			.cl-#{$shade}#{$target}#{$state} {
				color: $grey;
			}
			.bg-#{$shade}#{$target}#{$state} {
				background-color: $grey;
			}
			.bd-#{$shade}#{$target}#{$state} {
				border-color: $grey;
			}
		}
	}
}

@include make-layout();

@each $breakpoint, $value in $breakpoints {
	@include media($breakpoint) {
		@include make-layout($breakpoint);
	}
}
